package gophernews

// Item interface here is fulfilled by map[string]interface{} for the ease of
// use
type Item interface {
	By() string
	ID() int
	Kids() []int
	Parent() int
	Parts() []int
	Score() int
	Text() string
	Time() int
	Title() string
	Type() string
	URL() string
}

// item cannot be autogenerated as a struct, as it should not be represented as a struct
// item has varying fields, and not all fields will be returned for any single call
type item map[string]interface{}

func (i item) By() string {
	s, _ := i["by"].(string)
	return s
}

func (i item) ID() int {
	s, _ := i["id"].(float64)
	return int(s)
}

func (i item) Kids() []int {
	kids, _ := i["kids"]
	fsi, _ := kids.([]interface{})
	is := make([]int, len(fsi))
	for i, f := range fsi {
		is[i] = int(f.(float64))
	}
	return is
}

func (i item) Parent() int {
	s, _ := i["parent"].(float64)
	return int(s)
}

func (i item) Parts() []int {
	parts, _ := i["parts"]
	fsi, _ := parts.([]interface{})
	is := make([]int, len(fsi))
	for i, f := range fsi {
		is[i] = int(f.(float64))
	}
	return is
}

func (i item) Score() int {
	s, _ := i["score"].(float64)
	return int(s)
}

func (i item) Text() string {
	s, _ := i["text"].(string)
	return s
}

func (i item) Time() int {
	s, _ := i["time"].(float64)
	return int(s)
}

func (i item) Title() string {
	s, _ := i["title"].(string)
	return s
}

func (i item) Type() string {
	s, _ := i["type"].(string)
	return s
}

func (i item) URL() string {
	s, _ := i["url"].(string)
	return s
}

// Comment item
type Comment struct {
	By     string `json:"by"`
	ID     int    `json:"id"`
	Kids   []int  `json:"kids"`
	Parent int    `json:"parent"`
	Text   string `json:"text"`
	Time   int    `json:"time"`
	Type   string `json:"type"`
}

// Part item
type Part struct {
	By     string `json:"by"`
	ID     int    `json:"id"`
	Parent int    `json:"parent"`
	Score  int    `json:"score"`
	Text   string `json:"text"`
	Time   int    `json:"time"`
	Type   string `json:"type"`
}

// Poll item
type Poll struct {
	By    string `json:"by"`
	ID    int    `json:"id"`
	Kids  []int  `json:"kids"`
	Parts []int  `json:"parts"`
	Score int    `json:"score"`
	Text  string `json:"text"`
	Time  int    `json:"time"`
	Title string `json:"title"`
	Type  string `json:"type"`
}

// Story item
type Story struct {
	By    string `json:"by"`
	ID    int    `json:"id"`
	Kids  []int  `json:"kids"`
	Score int    `json:"score"`
	Time  int    `json:"time"`
	Title string `json:"title"`
	Type  string `json:"type"`
	URL   string `json:"url"`
}

// User type
type User struct {
	About     string `json:"about"`
	Created   int    `json:"created"`
	Delay     int    `json:"delay"`
	ID        string `json:"id"`
	Karma     int    `json:"karma"`
	Submitted []int  `json:"submitted"`
}

// Changes type
type Changes struct {
	Items    []int    `json:"items"`
	Profiles []string `json:"profiles"`
}
